// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: transport/internet/splithttp/config.proto

package splithttp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Config struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Host                 string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Path                 string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Header               map[string]string      `protobuf:"bytes,3,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ScMaxConcurrentPosts *RandRangeConfig       `protobuf:"bytes,4,opt,name=scMaxConcurrentPosts,proto3" json:"scMaxConcurrentPosts,omitempty"`
	ScMaxEachPostBytes   *RandRangeConfig       `protobuf:"bytes,5,opt,name=scMaxEachPostBytes,proto3" json:"scMaxEachPostBytes,omitempty"`
	ScMinPostsIntervalMs *RandRangeConfig       `protobuf:"bytes,6,opt,name=scMinPostsIntervalMs,proto3" json:"scMinPostsIntervalMs,omitempty"`
	NoSSEHeader          bool                   `protobuf:"varint,7,opt,name=noSSEHeader,proto3" json:"noSSEHeader,omitempty"`
	XPaddingBytes        *RandRangeConfig       `protobuf:"bytes,8,opt,name=xPaddingBytes,proto3" json:"xPaddingBytes,omitempty"`
	Xmux                 *Multiplexing          `protobuf:"bytes,9,opt,name=xmux,proto3" json:"xmux,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_transport_internet_splithttp_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_transport_internet_splithttp_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_transport_internet_splithttp_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Config) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Config) GetHeader() map[string]string {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Config) GetScMaxConcurrentPosts() *RandRangeConfig {
	if x != nil {
		return x.ScMaxConcurrentPosts
	}
	return nil
}

func (x *Config) GetScMaxEachPostBytes() *RandRangeConfig {
	if x != nil {
		return x.ScMaxEachPostBytes
	}
	return nil
}

func (x *Config) GetScMinPostsIntervalMs() *RandRangeConfig {
	if x != nil {
		return x.ScMinPostsIntervalMs
	}
	return nil
}

func (x *Config) GetNoSSEHeader() bool {
	if x != nil {
		return x.NoSSEHeader
	}
	return false
}

func (x *Config) GetXPaddingBytes() *RandRangeConfig {
	if x != nil {
		return x.XPaddingBytes
	}
	return nil
}

func (x *Config) GetXmux() *Multiplexing {
	if x != nil {
		return x.Xmux
	}
	return nil
}

type RandRangeConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          int32                  `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To            int32                  `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RandRangeConfig) Reset() {
	*x = RandRangeConfig{}
	mi := &file_transport_internet_splithttp_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RandRangeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandRangeConfig) ProtoMessage() {}

func (x *RandRangeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_transport_internet_splithttp_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandRangeConfig.ProtoReflect.Descriptor instead.
func (*RandRangeConfig) Descriptor() ([]byte, []int) {
	return file_transport_internet_splithttp_config_proto_rawDescGZIP(), []int{1}
}

func (x *RandRangeConfig) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *RandRangeConfig) GetTo() int32 {
	if x != nil {
		return x.To
	}
	return 0
}

type Multiplexing struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MaxConcurrency *RandRangeConfig       `protobuf:"bytes,1,opt,name=maxConcurrency,proto3" json:"maxConcurrency,omitempty"`
	MaxConnections *RandRangeConfig       `protobuf:"bytes,2,opt,name=maxConnections,proto3" json:"maxConnections,omitempty"`
	CMaxReuseTimes *RandRangeConfig       `protobuf:"bytes,3,opt,name=cMaxReuseTimes,proto3" json:"cMaxReuseTimes,omitempty"`
	CMaxLifetimeMs *RandRangeConfig       `protobuf:"bytes,4,opt,name=cMaxLifetimeMs,proto3" json:"cMaxLifetimeMs,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Multiplexing) Reset() {
	*x = Multiplexing{}
	mi := &file_transport_internet_splithttp_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Multiplexing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Multiplexing) ProtoMessage() {}

func (x *Multiplexing) ProtoReflect() protoreflect.Message {
	mi := &file_transport_internet_splithttp_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Multiplexing.ProtoReflect.Descriptor instead.
func (*Multiplexing) Descriptor() ([]byte, []int) {
	return file_transport_internet_splithttp_config_proto_rawDescGZIP(), []int{2}
}

func (x *Multiplexing) GetMaxConcurrency() *RandRangeConfig {
	if x != nil {
		return x.MaxConcurrency
	}
	return nil
}

func (x *Multiplexing) GetMaxConnections() *RandRangeConfig {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *Multiplexing) GetCMaxReuseTimes() *RandRangeConfig {
	if x != nil {
		return x.CMaxReuseTimes
	}
	return nil
}

func (x *Multiplexing) GetCMaxLifetimeMs() *RandRangeConfig {
	if x != nil {
		return x.CMaxLifetimeMs
	}
	return nil
}

var File_transport_internet_splithttp_config_proto protoreflect.FileDescriptor

const file_transport_internet_splithttp_config_proto_rawDesc = "" +
	"\n" +
	")transport/internet/splithttp/config.proto\x12!xray.transport.internet.splithttp\"\xaf\x05\n" +
	"\x06Config\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\x12M\n" +
	"\x06header\x18\x03 \x03(\v25.xray.transport.internet.splithttp.Config.HeaderEntryR\x06header\x12f\n" +
	"\x14scMaxConcurrentPosts\x18\x04 \x01(\v22.xray.transport.internet.splithttp.RandRangeConfigR\x14scMaxConcurrentPosts\x12b\n" +
	"\x12scMaxEachPostBytes\x18\x05 \x01(\v22.xray.transport.internet.splithttp.RandRangeConfigR\x12scMaxEachPostBytes\x12f\n" +
	"\x14scMinPostsIntervalMs\x18\x06 \x01(\v22.xray.transport.internet.splithttp.RandRangeConfigR\x14scMinPostsIntervalMs\x12 \n" +
	"\vnoSSEHeader\x18\a \x01(\bR\vnoSSEHeader\x12X\n" +
	"\rxPaddingBytes\x18\b \x01(\v22.xray.transport.internet.splithttp.RandRangeConfigR\rxPaddingBytes\x12C\n" +
	"\x04xmux\x18\t \x01(\v2/.xray.transport.internet.splithttp.MultiplexingR\x04xmux\x1a9\n" +
	"\vHeaderEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"5\n" +
	"\x0fRandRangeConfig\x12\x12\n" +
	"\x04from\x18\x01 \x01(\x05R\x04from\x12\x0e\n" +
	"\x02to\x18\x02 \x01(\x05R\x02to\"\xfe\x02\n" +
	"\fMultiplexing\x12Z\n" +
	"\x0emaxConcurrency\x18\x01 \x01(\v22.xray.transport.internet.splithttp.RandRangeConfigR\x0emaxConcurrency\x12Z\n" +
	"\x0emaxConnections\x18\x02 \x01(\v22.xray.transport.internet.splithttp.RandRangeConfigR\x0emaxConnections\x12Z\n" +
	"\x0ecMaxReuseTimes\x18\x03 \x01(\v22.xray.transport.internet.splithttp.RandRangeConfigR\x0ecMaxReuseTimes\x12Z\n" +
	"\x0ecMaxLifetimeMs\x18\x04 \x01(\v22.xray.transport.internet.splithttp.RandRangeConfigR\x0ecMaxLifetimeMsB\x85\x01\n" +
	"%com.xray.transport.internet.splithttpP\x01Z6github.com/xtls/xray-core/transport/internet/splithttp\xaa\x02!Xray.Transport.Internet.SplitHttpb\x06proto3"

var (
	file_transport_internet_splithttp_config_proto_rawDescOnce sync.Once
	file_transport_internet_splithttp_config_proto_rawDescData []byte
)

func file_transport_internet_splithttp_config_proto_rawDescGZIP() []byte {
	file_transport_internet_splithttp_config_proto_rawDescOnce.Do(func() {
		file_transport_internet_splithttp_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_transport_internet_splithttp_config_proto_rawDesc), len(file_transport_internet_splithttp_config_proto_rawDesc)))
	})
	return file_transport_internet_splithttp_config_proto_rawDescData
}

var file_transport_internet_splithttp_config_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_transport_internet_splithttp_config_proto_goTypes = []any{
	(*Config)(nil),          // 0: xray.transport.internet.splithttp.Config
	(*RandRangeConfig)(nil), // 1: xray.transport.internet.splithttp.RandRangeConfig
	(*Multiplexing)(nil),    // 2: xray.transport.internet.splithttp.Multiplexing
	nil,                     // 3: xray.transport.internet.splithttp.Config.HeaderEntry
}
var file_transport_internet_splithttp_config_proto_depIdxs = []int32{
	3,  // 0: xray.transport.internet.splithttp.Config.header:type_name -> xray.transport.internet.splithttp.Config.HeaderEntry
	1,  // 1: xray.transport.internet.splithttp.Config.scMaxConcurrentPosts:type_name -> xray.transport.internet.splithttp.RandRangeConfig
	1,  // 2: xray.transport.internet.splithttp.Config.scMaxEachPostBytes:type_name -> xray.transport.internet.splithttp.RandRangeConfig
	1,  // 3: xray.transport.internet.splithttp.Config.scMinPostsIntervalMs:type_name -> xray.transport.internet.splithttp.RandRangeConfig
	1,  // 4: xray.transport.internet.splithttp.Config.xPaddingBytes:type_name -> xray.transport.internet.splithttp.RandRangeConfig
	2,  // 5: xray.transport.internet.splithttp.Config.xmux:type_name -> xray.transport.internet.splithttp.Multiplexing
	1,  // 6: xray.transport.internet.splithttp.Multiplexing.maxConcurrency:type_name -> xray.transport.internet.splithttp.RandRangeConfig
	1,  // 7: xray.transport.internet.splithttp.Multiplexing.maxConnections:type_name -> xray.transport.internet.splithttp.RandRangeConfig
	1,  // 8: xray.transport.internet.splithttp.Multiplexing.cMaxReuseTimes:type_name -> xray.transport.internet.splithttp.RandRangeConfig
	1,  // 9: xray.transport.internet.splithttp.Multiplexing.cMaxLifetimeMs:type_name -> xray.transport.internet.splithttp.RandRangeConfig
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_transport_internet_splithttp_config_proto_init() }
func file_transport_internet_splithttp_config_proto_init() {
	if File_transport_internet_splithttp_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_transport_internet_splithttp_config_proto_rawDesc), len(file_transport_internet_splithttp_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_transport_internet_splithttp_config_proto_goTypes,
		DependencyIndexes: file_transport_internet_splithttp_config_proto_depIdxs,
		MessageInfos:      file_transport_internet_splithttp_config_proto_msgTypes,
	}.Build()
	File_transport_internet_splithttp_config_proto = out.File
	file_transport_internet_splithttp_config_proto_goTypes = nil
	file_transport_internet_splithttp_config_proto_depIdxs = nil
}
